float temp_P(float x)
{
  return -3/10 + x/75;
}

float P_list[256] = 
{
 8.42752E-06,
9.23963E-06,
1.013E-05,
1.11062E-05,
1.21764E-05,
1.33497E-05,
1.46362E-05,
1.60466E-05,
1.75929E-05,
1.92882E-05,
2.11468E-05,
2.31846E-05,
2.54187E-05,
2.78681E-05,
3.05535E-05,
3.34977E-05,
3.67256E-05,
4.02645E-05,
4.41444E-05,
4.83982E-05,
5.30618E-05,
5.81748E-05,
6.37805E-05,
6.99262E-05,
7.66641E-05,
8.40512E-05,
9.21501E-05,
0.000101029,
0.000110764,
0.000121436,
0.000133137,
0.000145965,
0.000160028,
0.000175447,
0.00019235,
0.000210882,
0.000231199,
0.000253473,
0.000277892,
0.000304663,
0.000334012,
0.000366187,
0.00040146,
0.00044013,
0.000482523,
0.000528996,
0.000579943,
0.000635794,
0.000697019,
0.000764136,
0.00083771,
0.000918362,
0.001006771,
0.001103681,
0.001209908,
0.001326346,
0.001453974,
0.001593862,
0.001747186,
0.001915231,
0.002099404,
0.002301248,
0.002522447,
0.002764851,
0.003030478,
0.003321539,
0.003640453,
0.003989865,
0.004372667,
0.004792019,
0.005251376,
0.005754511,
0.006305547,
0.006908982,
0.007569725,
0.008293131,
0.009085037,
0.009951802,
0.010900352,
0.011938222,
0.013073607,
0.014315408,
0.015673288,
0.017157727,
0.018780078,
0.020552622,
0.022488632,
0.024602428,
0.02690944,
0.029426257,
0.032170688,
0.035161805,
0.038419986,
0.041966945,
0.045825756,
0.050020856,
0.054578027,
0.059524366,
0.064888219,
0.070699083,
0.076987479,
0.083784774,
0.091122961,
0.099034383,
0.107551405,
0.116706015,
0.126529376,
0.137051293,
0.148299634,
0.16029968,
0.173073422,
0.186638814,
0.201009,
0.216191524,
0.232187558,
0.248991165,
0.26658863,
0.284957894,
0.304068126,
0.323879452,
0.344342895,
0.365400518,
0.386985824,
0.40902438,
0.431434701,
0.454129343,
0.477016209,
0.5,
0.522983791,
0.545870657,
0.568565299,
0.59097562,
0.613014176,
0.634599482,
0.655657105,
0.676120548,
0.695931874,
0.715042106,
0.73341137,
0.751008835,
0.767812442,
0.783808476,
0.798991,
0.813361186,
0.826926578,
0.83970032,
0.851700366,
0.862948707,
0.873470624,
0.883293985,
0.892448595,
0.900965617,
0.908877039,
0.916215226,
0.923012521,
0.929300917,
0.935111781,
0.940475634,
0.945421973,
0.949979144,
0.954174244,
0.958033055,
0.961580014,
0.964838195,
0.967829312,
0.970573743,
0.97309056,
0.975397572,
0.977511368,
0.979447378,
0.981219922,
0.982842273,
0.984326712,
0.985684592,
0.986926393,
0.988061778,
0.989099648,
0.990048198,
0.990914963,
0.991706869,
0.992430275,
0.993091018,
0.993694453,
0.994245489,
0.994748624,
0.995207981,
0.995627333,
0.996010135,
0.996359547,
0.996678461,
0.996969522,
0.997235149,
0.997477553,
0.997698752,
0.997900596,
0.998084769,
0.998252814,
0.998406138,
0.998546026,
0.998673654,
0.998790092,
0.998896319,
0.998993229,
0.999081638,
0.99916229,
0.999235864,
0.999302981,
0.999364206,
0.999420057,
0.999471004,
0.999517477,
0.99955987,
0.99959854,
0.999633813,
0.999665988,
0.999695337,
0.999722108,
0.999746527,
0.999768801,
0.999789118,
0.99980765,
0.999824553,
0.999839972,
0.999854035,
0.999866863,
0.999878564,
0.999889236,
0.999898971,
0.99990785,
0.999915949,
0.999923336,
0.999930074,
0.99993622,
0.999941825,
0.999946938,
0.999951602,
0.999955856,
0.999959735,
0.999963274,
0.999966502,
0.999969446,
0.999972132,
0.999974581,
0.999976815,
0.999978853,
0.999980712,
0.999982407,
0.999983953,
0.999985364,
0.99998665,
0.999987824,
0.999988894,
0.99998987,
0.99999076,
0.999991572,
0.999992313
};

int pos_from_P(float x)
{
  int start=0, end=63,i;
  for(i=1;i<8;i++)
  {
    if(x> P_list[(start+end)/2])
    start = (start+end)/2;

    if(x< P_list[(start+end)/2])
    end = (start+end)/2;

    if(P_list[(start+end)/2]==x)
      return  (start+end)/2;
  }

  return (start+end)/2;
}






void setup() {
  // put your setup code here, to run once:
  sensors.Begin();
  pinMode(2,OUTPUT);
  pinMode(5,OUTPUT);
  pinMode(3,INPUT);
  Serial.begin(9600);




}

const int xstepPin = 2; //X.STEP
const int xdirPin = 5; // X.DIR high up
int nowpos=0;
int i, stepperlen;

void loop() {
  
  float temp , P = temp_P(temp) ;

  
  int pos=pos_from_P(P);
  if(nowpos > pos)
  {
    digitalWrite(xdirPin,LOW);
    for(i=1; i<= (nowpos-pos)*stepperlen;i++)
    {
      digitalWrite(xstepPin,HIGH);
        delayMicroseconds(300);
        digitalWrite(xstepPin,LOW);
        delayMicroseconds(300);
    }
  }

    if(nowpos < pos)
  {
    digitalWrite(xdirPin,HIGH);
    for(i=1; i<= (pos-nowpos)*stepperlen;i++)
    {
      digitalWrite(xstepPin,HIGH);
        delayMicroseconds(300);
        digitalWrite(xstepPin,LOW);
        delayMicroseconds(300);
    }
  }

  nowpos=pos;


}
